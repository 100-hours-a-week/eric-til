# bcrypt
- blowfish + crypt
- 블로우피시 알고리즘을 기반으로 한 단방향 암호화 해시 함수
- 대칭형 블록 암호 : 암호화와 복호화에 동일한 키를 사용

- 비밀 번호의 안전한 저장과 보안 강화를 위해 사용
- 조금 더 안전한 암호를 위해 솔트를 사용함. 
	- 솔트 : 비밀번호에 추가하는 무작위 데이터
	- 솔트를 추가하고 암호화함으로 해쉬가 더 복잡해짐
		- saltRounds : bcrypt 알고리즘에서 비밀번호 해시를 생성할 때 해시 함수의 반복 횟수를 지정하는 값
# stateless, connectionless
- HTTP의 특성
- Stateless 
	- 이전 상태를 가지고 있음
	- 이전에 요청한 정보를 기억하고 있지 않음
	  
	- 서버가 클라이언트의 상태 정보를 저장하면 서버에 부하가 가기 때문
	- 여러 개의 서버가 존재할 때 서버마다 같은 상태 값을 유지하기가 어렵기 때문

- Conntectionless
	- 클라이언트가 서버에 요청을 하고 응답을 받으면 그 즉시 연결을 끊음

	- 각 요청이 독립적으로 처리되기 때문에 서버가 동시에 많은 사용자의 요청을 처리할 수 있음
# 인증, 인가
- 인증 : 사용자의 신원을 확인하는 과정
	- 홈페이지에서 로그인 하는 과정이 인증임
- 인가 : 인증된 사용자에게 접근 권한을 부여하는 과정
	- 관리자 페이지에는 접근할 수 없는 것은 인가를 받지 못했기 때문

- 사용 방법
	1. HTTP로 매번 아이디, 패스워드를 보내는 방식
		- 보안이 미흡하고 리소스를 많이 사용함
	2. 세션을 이용하는 방식
		- 서버가 정보를 계속 기억하고 있어야함
	3. JWT를 이용하는 방식
		- 헤더에 토큰 넣어서 보내는 방식
# 쿠키
- 웹사이트를 방문할 때 사용자의 컴퓨터에 저장되는 작은 파일
- 개인화된 서비스를 제공할 수 있게 도움

- 공개되어도 문제 없는 정보만 저장. 사용자의 브라우저에 파일로 저장됨
# 세션
- 컴퓨터 프로세스 사이에서 상호 인식 후 데이터 송수신을 마치는 기간?
	- 사용자가 웹사이트에 접속한 순간부터 종료할 때까지 유지되는 상태 정보
- 세션 정보를 저장할 때 꼭 파일로 저장하지 않음

- 사용자 정보를 서버 측에서 관리하여 보안을 강화하고 맞춤 정보 제공하기 위해 사용
- 외부에 공개되어서는 안되는 정보 저장

- 사용자별로 세션 아이디를 난수로 생성하여 사용자 정보를 저장 
- 세션 아이디를 통해 브라우저는 서버와 통신

- 세션 저장 방식
	1. 인메모리 : 코드로 세션을 저장. 변수의 정보 저장
	2. 파일 스토리지 : 익스프레스 파일 기반?
	3. 데이터베이스 : 디비에 저장
# 프레임워크 라이브러리
- 프레임워크 : 개발자가 기능을 구현할 때 집중할 수 있도록 기본적인 기능을 제공하는 골조
- 라이브러리 : 소프트웨어 개발 시 사용되는, 컴퓨터 프로그램이 활용하는 비휘발성 자원들의 집합

- 프레임워크는 내가 만들고 있는 앱에 기반이 되는 프로그램 - 틀
- 라이브러리는 내가 만들고 있는 앱에 추가할 수 있는 기능이 있는 프로그램 - 구체적인 수단과 도구

- 프로그래밍을 더 쉽고 빠르고 안정적으로 할 수 있게 해줌
- 프레임워크는 일관성을 갖추는 것을 강조
	- 프레임워크 내에 정의된 규칙과 패턴을 따름으로 일관적이고 유지 보수하기 쉬운 구조를 갖춤
- 라이브러리는 전문성을 갖추는데 강조
	- 해당 분야 전문 지식 없이 고품질 기능 구현 가능

- API : 응용 프로그램 간 소통하기 위해 사용하는 언어나 메세지 형식
	- API 문서 : API를 사용할 수 있도록 작성된 사용 설명서
	- 명세서 : 라이브러리나 프레임워크의 구조를 상세히 설명한 문서

- API는 문서, 명세서로서의 역할, 라이브러리는 명세서에 기반하여 만들어진 구체적인 구현체
# REST API
- REST : 자원을 이름으로 구분하고 해당 자원의 상태 정보를 주고받는 모든 것?
	  클라이언트와 서버 간 통신에서 리소스의 상태와 표현(Representation)을 전송한다
- REST API : REST 아키텍쳐 스타일을 따르는 응용 프로그램

- 사용 이유
	- 클라이언트-서버 분리
	- 데이터의 명확한 표현
	- 이해하기 쉬운 API

- 사용 방법
	- URI : 정보의 자원 표현. 명사로 표현 ex) /users
		- HTTP 메서드 : 자원에 대한 행위 표현. GET, POST, PUT, PATCH, DELETE
		- /을 통해 계층을 표현 : /users/{userId}/posts
		- 소문자 권장. 동사 사용 x, 밑줄 사용 피하기, 확장자 포함 x, URI 마지막에 / 포함 x
# 페이징
- 한정된 용량에서 데이터를 한 번에 처리할 수 있는 적당한 크기(페이지)로 나누어서 처리하는 것
- 클라이언트와 서버의 부하를 줄이기 위해 사용

- 유저에게 페이지를 넘길 수 있는 네비게이션을 제공하거나, 인피니티 스크롤링(?)으로 제공
# HTTPS
- HTTP 전송 계층에 인증과 암호화를 적용해 보안을 강화시킨 통신 규약
	- HTTP는 제 3자가 볼 수 있음
- 웹 서버에 SSL, TSL 인증서를 설치하여 활성화

- 서버에서
	1. 신원 확인 및 키 생성
		1. 신원 확인을 하고 공개키와 비밀키 생성
	2. CSR 생성 : 신원 정보와 공개키를 포함한 인증서 서명 요청 CSR을 작성. 개인키로 서명되어 증명
	3. CSR 제출 : CA에 CSR을 제출
	4. 인증서 발급 : CA에서 문제가 없다고 판단하면 공개키, 신원 정보 등을 포함한 디지털 인증서를 발급
	5. 인증서 설치 : 발급 받은 인증서를 자신의 서버에 설치. 서버에 접근할 때 인증서를 제공하여 신원 확인 시켜줌
	6. 인증서 검증 : 서버에서 제공한 인증서를 받고 공개키로 이를 확인하여 검증 

- 사용자에서
	1. CA로부터 공개키가 포함된 인증서 발급 받음
	2. 서버에게 연결 요청. 서버는 자신의 인증서를 사용자에게 전송
	3. 서버의 인증서를 검토하여 CA 공개키를 이용하여 서명 검증
	4. 자신의 요청 사항을 적고 자신의 비밀키로 서명. 서버의 공개키를 사용하여 문서를 암호화
	5. 암호화된 문서를 전달
	6. 서버는 문서를 받아 비밀키로 복호화하고, 사용자 공개키를 이용하여 검증
	7. 대칭키 교환. 처음 과정에서 문서 전달을 위한 한 번의 안전한 통신을 할 때 그들만 아는 대칭키를 교환(TLS 핸드 셰이킹). 이후에는 대칭키를 이용하여 빠르게 요청, 응답.
		- 대칭키 : 암호화 복호화 하는 키가 같은 방식

- 대칭키 교환 방법
	1. 사용자가 대칭키 생성
	2. 대칭키를 서버의 공개키로 암호화
	3. 대칭키 전송
	4. 서버는 비밀키를 사용하여 대칭키 복호화. 이후 이를 통해 안전하게 통신
# 데이터 센터
- 서버 컴퓨터와 네트워크 회선 등을 제공하는 건물이나 시설
- 서버를 24/365 안정적으로 운영하기 위해 사용
- 온 프레미스 서버 - 물리적으로 확장해야 해서 좀 불편함
- 클라우드 서버(데이터 센터) - 트래픽 증가에 따라 비용이 크게 청구될 수 있음
# Log
- 컴퓨터에 접속한 기록이나 다른 활동이 컴퓨터 내에 저장되는 것
- 에러 로그 : 프로그램이나 시스템이 작동하지 않을 때 발생하는 문제를 기록. 문제 원인 찾아 해결하는데 도움이 됨
- SQL 로그 : 디비 관련 작업 수행할 때 사용된 SQL 문장들을 기록
- 접속 로그 : 사용자가 웹사이트에 접속할 때 기록. ip 주소, 시간, 페이지 주소 등이 포함
- 이벤트 로그 : 시스템이나 애플리케이션에서 발생하는 다양한 이벤트 기록
- API 통신 로그 : 외부 시스템과의 데이터 교환 과정에서 발생하는 이벤트를 기록. api 통신 과정에서 문제 파악하는데 도움
# html
- 웹페이지의 구조를 정의하기 위한 언어
- 웹 브라우저가 문서를 해석하여 시작적으로 홈페이지 구조를 표현할 수 있게 하기 위해서 

- 태그
# CSS
- cascading style sheets
- 웹 문서의 전반적인 스타일을 미리 저장해 둔 스타일 시트
- 웹 페이지의 스타일과 레이아웃을 정의하기 위한 언어
- 웹페이지의 스타일이 여러 소스로부터 적용되고 충돌하는 경우 우선 순위에 따라 계단식으로 적용

- 선택자를 사용하여 태그의 스타일 적용
	- 요소 선택자 : HTML 요소에 태그명을 사용하여 style 적용 `선택자{}`
	- 클래스 선택자 : 클래스 속성을 지정하고 해당 클래스명을 지정하여 사용. `.클래스{}`
	- ID 선택자 : HTML 요소에 아이디 속성을 지정하고 해당 아이디 명을 사용하여 style 적용. `#ID{}`
# Boxmodel
- HTML 요소의 고유한 특징으로 내용, 패딩, 테두리, 여백 등의 여러 부분으로 나누어진 사각형 박스로 표현하는 방법

- 웹페이지 요소를 구조화하고 그 크기와 여백을 제어하기 위해 사용
- Content, padding, border, margin
	- content : 요소의 실제 내용이 표시
	- padding : 요소 내부 여백 설정. 컨텐츠와 테두리 사이 공간
	- border : 요소의 경계선 정의. 테두리 두께, 스타일 등
	- margin : 요소의 바깥쪽 여백 설정. 요소 간의 공간 조정
# 우리의 서버 구조
- MVC 패턴
	- 모델과 뷰, 컨트롤러
		- 모델 : 데이터 관리
		- 뷰 : 사용자 인터페이스
		- 컨트롤러 : 두 영역을 연결하는 로직
		  
- 스마트폰의 등장, 페북, 유튭의 등장 -> 서버에 부하
	- 최적화 방안 모색하게 만들었음

- 기술 발전
	- 웹사이트를 사용자에게 부분과 데이터를 처리하는 부분이 명확히 구분하게 되었음
# flex
- 웹페이지 요소들을 유연하게 배치하고 조정할 수 있도록 하는 레이아웃 모델
- 박스 엘리멘트들을 배치하는데 사용되는 CSS 레이아웃 시스템
- 쉽게 반응형 웹 디자인을 구현할 수 있음

- 부모 요소에 display:flex를 적용하여 시작
	- justify-content, align-items
- flex container
	- 컴퓨터 내 가상 공간에서 앱이 원활하게 작동하도록 필요한 모든 요소를 통합한 상자
		- 가상 공간 : flex box
# DOM
-  HTML 코드가 브라우저에 의해 파싱되어 메모리 상에 객체 형태로 구성된 구조
- 객체들은 HTML 요소를 나타내고 동작하는 코드를 뜻함
- 웹페이지가 사용자와 상호작용하면서 실시간으로 변화하는 웹 경험을 가능하게 하는 핵심 기술

- DOM을 통해 웹페이지가 로드 된 후에도 사용자와의 상호작용을 통해 웹페이지의 구조, 스타일을 실시간으로 변경할 수 있음

- 동작방식
	- 브라우저는 웹 서버로부터 HTML 파일을 원시 데이터 형태인 BYTE로 받음
	- 브라우저는 BYTE 데이터를 인코딩에 따라 문자로 변환. 사람이 이해할 수 있는 형태로
	- 문자로 변환된 데이터는 토큰으로 분리됨. 문서의 구조를 이해하기 위해 문자 데이터를 분리한 기본 구성 요소. 
	- 각 토큰은 노드로 변환됨. HTML 문서의 다양한 부분을 나타내는 작은 블록. 노드들이 모여 웹페이지를 구성하는 구조를 만듬.
		- 노드와 토큰 차이점
			- 토큰은 토큰 사이에 관계나 구조 같은 것은 없음
			- 노드는 객체가 된 것. 서로 연결되어 계층적 구조를 형성. 부모-자식 관계
	- 모든 노드들이 모여 DOM을 형성함

- 간단하게 말해 DOM은 웹페이지의 동적인 변경을 가능하게 하고, 문서의 내용과 구조를 프로그래밍적으로 조작할 수 있도록 하는 구조

- 노드와 DOM의 차이
	- 노드 : 웹페이지의 개별적 요소. 단일 요소의 속성이나 텍스트를 변경하는데 사용됨
	- DOM : 노드들이 모여서 이루어진 전체적인 문서 구조.  전체 웹페이지의 구조와 내용 변경 가능
	- 둘 다 자바스크립트로 조작 가능
		- 노드는 직접 가능
		- DOM은 API를 이용하여 가능
	- 즉 노드 조작은 특정 요소에 대한 직접적인 변경, 돔 조작은 문서 전체의 구조를 변경하는 큰 범위

- 브라우저가 HTML 코드를 DOM트리로 만들어주면 자바스크립트로 조작
# cssom
- 웹 브라우저가 css를 해석해 자바스크립트로 웹페이지의 스타일을 조작하기 위해 사용하는 객체 모델
- DOM은 문서 구조, cssom은 스타일 정보
- 상호작용성과 시각적 매력 향상
- 웹페이지 스타일을 자바 스크립트를 이용하여 동적으로 변경 가능

- 동작 방식
	- BYTE로 받음
	- characters는 BYTE를 인코딩에 따라 변환한 텍스트 형태
	- 토큰
	- cssom 트리 : css 규칙을 계층적인 구조로 나타내는 객체 모델
		- 웹페이지의 스타일 결정, 랜더링을 위해 DOM과 결합할 객체 구조 형셩
		- 각 토큰을 스타일 정보를 나타내는 노드로 변환
		- 노드들은 계층적 구조 형성
# event
- 사용자가 웹 페이지에서 수행하는 동작

- 웹페이지와 사용자 간의 클릭 등으로 상호작용을 가능하게 하기 위해서 

- EventListener와 EventHandler를 사용하여 적용
	- 적용한 엘리먼트를 찾고 실행할 함수를 만들고 엘리먼트에 리스너를 연결. 리스너가 이벤트를 감지했을 때 알려줌
	- () => {} 이 부분이 핸들러에 해당함. 
# Fetch
- 서버에게 데이터를 비동기적으로 요청하고 수신하는 과정
-  클라이언트가 서버에 비동기적으로 네트워크 요청을 보내고 응답을 받아오기 위해 사용됨
- 페이지를 새로고침하지 않고도 동작가능

- fetch(url) 형태로 사용됨 .then을 통해 응답 .catch를 통해 오류 처리
# Lottie
- JSON 기반의 애니메이션 파일을 제공하는 서비스 
- 전통 애니메이션 파일보다 크기가 작음
- 벡터 기반이라 크기 조정이 자유로움
# Search Engine Optimization
- 웹사이트를 검색 엔진에서 더 잘 찾을 수 있도록 최적화하는 기술

- 웹사이트 검색 엔진 순위를 높여 더 많은 방문자 유치하기 위해 사용

- 웹 사이트 컨텐츠 최적화, 적절한 키워드를 포함, 명확하고 간결한 메뉴 구성, 모바일 친화적, 백링크 구축, SNS 활용
