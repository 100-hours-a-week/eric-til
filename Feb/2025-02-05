## 동기 / 비동기 - 순차의 문제

---

### 동기

- 요청한 작업이 끝날때까지 기다림
- ‘함수 호출 시 결과가 반환될 때까지 기다리는 처리 방식’
- 예시 : a가 눈을 붙이고, 이 작업이 완료되어야 b가 포장 작업을 시작할 수 있음. 즉 b의 작업 시작은 a의 작업 완료에 의존적임

- API 호출이나 함수 실행 시 결과를 바로 반환받음
- 제어권은 특정 작업 실행 이후 즉시 돌려 받는 형태

---

### 비동기

- 각 단계가 독립적으로 진행됨. 각 작업 완료 시점에 서로에게 알림을 줄 수 있으며, 이 알림을 통해 다음 작업을 계속하거나 시작. 요청 후 기다리지 않고 다른 작업 수행
- ‘함수 호출과 결과 반환 사이에 다른 작업을 수행할 수 있는 처리 방식’
- 예시 : a가 눈을 붙이는 동안, b는 기다리지 않고 이미 붙어 있는 곰인형을 포장할 수 있음

- 콜백 함수, 프로미스(Promise), async/await 등을 활용하여 결과를 나중에 받음, 동시에 여러 작업 가능
- 제어권은 특정 작업 실행 이후 즉시 돌려 받는 형태

## 블로킹 / 논블로킹 - 차단의 문제

---

### 블로킹

- 현재 작업이 끝나야지 다음 작업을 시작할 수 있음. 요청한 작업이 끝날 때까지 현재 프로세스(스레드) 정지
- ‘현재 실행 중인 작업이 완료될 때까지 다음 작업을 기다리는 방식’
- 예시 : a가 눈을 붙이고 그 작업이 완전히 끝날때까지 b는 포장 작업을 시작할 수 없음

- 동기적 API 호출을 통해 구현, 작업 완료 후 다음 명령어로 넘어감
- 특정 작업을 실행 할 때 제어권을 완전히 넘기기 때문에 다른 작업을 진행할 수 없음

---

### 논블로킹

- 현재 작업이 끝나지 않아도 다음 작업을 실행하는 방식. 요청한 작업이 끝나지 않아도 다른 작업 가능
- ‘현재 실행 중인 작업의 완료를 기다리지 않고 다음 작업을 실행하는 방식’
- 예시 : a가 눈을 붙인 후 b가 포장을 완료하지 않아도 다음 인형의 눈을 붙일 수 있음

- 비동기적 API 호출, 콜백 함수, 프로미스, async/await 등을 이용해 구현, 작업 요청 후 바로 다음 명령어 실행
- 특정 작업 실행시 제어권을 넘겨 실행 후 즉시 돌려 받기 때문에 다른 작업을 수행할 수 있음

## 동기 / 비동기의 차이를 설명하고 파일 읽기 작업을 예시로 들어 설명

---

- 동기와 비동기는 작업 순서 처리 차이.
- 동기는 요청한 작업을 순차적으로 처리. 비동기는 순차적으로 처리하지 않음.
- 동기는 함수 호출 후 결과를 받아야 다음 코드 실행. 비동기는 함수 호출 후 결과가 올 때까지 다른 코드 실행 가능.
- 동기는 직선적인 흐름. 비동기는 이벤트 기반 흐름

### 동기

![image.png](attachment:45b54032-6cc8-4ce9-9c8c-fd589da0e6d2:a8c2c063-a577-4109-899d-779220e38a80.png)

### 비동기

![image.png](attachment:2cdd3aa3-1af3-4b47-bc0e-19e850d55bb9:aa018022-b3a6-43ae-af03-9975230ead45.png)

---

### 파일 읽기 작업

동기

- 파일을 읽기가 끝날 때까지 멈춤

```java
def read_file_sync():
    print("파일 읽기 시작")
    with open("example.txt", "r") as file:
        data = file.read()  # 파일 읽는 동안 제어권 유지 (대기)
    print("파일 읽기 완료")
    return data

print("동기 파일 읽기 실행")
content = read_file_sync()  # 여기서 파일 읽기가 끝날 때까지 대기
print("다음 코드 실행")
```

```java
동기 파일 읽기 실행
파일 읽기 시작
파일 읽기 완료
다음 코드 실행
```

`file.read()`가 끝날 때까지 프로그램 대기하기 때문에 출력이 위와 같다

비동기

- 파일을 읽는 동안 다른 작업 수행 가능

```java
async def read_file_async():
    print("파일 읽기 시작")
    async with aiofiles.open("example.txt", "r") as file:
        data = await file.read()  # 비동기 파일 읽기 (제어권 반환)
    print("파일 읽기 완료")
    return data

async def main():
    print("비동기 파일 읽기 실행")
    task = asyncio.create_task(read_file_async())  # 파일 읽기 요청 후 다음 코드 실행
    print("다른 작업 수행 가능")
    content = await task  # 파일 읽기가 끝날 때까지 대기
    print("다음 코드 실행")

asyncio.run(main())
```

```java
비동기 파일 읽기 실행
파일 읽기 시작
다른 작업 수행 가능
파일 읽기 완료
다음 코드 실행
```

## 블로킹과 논블로킹을 제어권 관점에서 설명

### 블로킹

![image.png](attachment:95caf770-2774-47d3-9e3f-055c97257108:image.png)

1. A 함수가 B 함수를 호출하면 B에게 제어권이 넘어간다
2. 제어권을 넘겨받은 B는 함수를 실행한다.
3. 이때 A는 B에게 제어권을 넘겨주었기 때문에 A 함수 실행을 잠시 멈춘다. (Block)
4. B 함수가 실행이 끝나면 자신을 호출한 A에게 제어권을 돌려준다.
5. 제어권을 다시 받은 A 함수는 그다음 작업을 실행한다.

---

### 논블로킹

![image.png](attachment:3790badc-2f81-4ab8-849d-c42c8de3f83c:image.png)

1. A 함수가 B 함수를 호출한다.
2. 호출된 B 함수는 실행되지만, 제어권은 A 함수가 그대로 가지고 있는다.
3. A 함수는 계속 제어권을 가지고 있기 때문에 B 함수를 호출한 이후에도 자신의 코드를 계속 실행한다.

## 동기 + 블로킹과 동기 + 논블로킹 조합의 차이를 설명해주세요.

### 동기 + 블로킹

- 다른 작업이 진행되는 동안 자신의 작업을 처리하지 않고 - 블로킹
- 다른 작업의 완료 여부를 바로 받아 순차적으로 처리하는 - 동기

- 비유 - 사원 1,2,3에게 A, B, C일을 순서대로 시키는 상황
    1. 1에게 A를 시키고 아무것도 하지 않고 기다림
    2. 1이 A를 완료했다고 보고
    3. 2에게 B를 시키고 아무것도 하지 않고 기다림
    4. 2가 B를 완료했다고 보고
    5. 3에게 C를 시키고 아무것도 하지 않고 기다림
    6. 3이 C를 완료했다고 보고
    
- 제어권이 일을 시키는 곳으로 넘어가기 때문에 아무것도 할 수 없음
- 결과처리와 함께 제어권 받음

---

### 동기 + 논블로킹

- 다른 작업이 진행되는 동안에도 자신의 작업을 처리하고 - 논블로킹
- 다른 작업의 결과를 바로 처리하여 작업을 순차적으로 처리하는 - 동기

- 비유 - 사원 1,2,3에게 A, B, C일을 순서대로 시키는 상황
    1. 1에게 A를 시킴
    2. 1에게 A를 다했는지 계속 물어봄
        1. 다했나요?
        2. 아니요
    3. 1이 다했다고 말함
    4. 2에게 B를 시킴
    5. 2에게 B를 다했는지 계속 물어봄
        1. 다했나요?
        2. 아니요
    6. 2가 다했다고 말함
    7. 생략

- 제어권이 즉시 반환되기 때문에 다른 작업을 처리할 수 있음
- 결과 처리에 대해서 계속 관찰함

## 비동기 I/O와 논블로킹 I/O는 같은 개념인가요? 두 개념이 어떻게 다르다고 생각하시나요?

공통점

- 결과를 기다리지 않고 다른 작업을 수행할 수 있음

차이점

- 비동기 I/O는 결과 처리를 이벤트 기반으로 알림을 받음
- 논블로킹 I/O는 결과 처리를 지속적을 확인함 - 성능 저하

## 멀티 스레드 환경에서 블로킹 I/O를 사용할때 발생하는 컨텍스트 스위칭 오버헤드를 줄이기 위한 방법은 어떤것이 있나요?

- I/O 버퍼링과 배치처리 ?
    - 호출 횟수가 적으면 스위칭도 적어질테니까 오버헤드가 줄지 않을까?
- 블로킹 말고 논블로킹으로 바꾼다? 도 방법이 될 수 있나
- 블로킹 I/O 작업이 많을 경우, 스레드 풀을 활용하여 과도한 스레드 생성을 막아 오버헤드를 줄일 수 있을듯

## 웹 서버 아키텍처에서 논블로킹 방식이 주는 성능적 이점은 어떤것이 있나요?

- node.js : 단일 이벤트 루프와 워커풀에서 논블로킹 I/O 처리(https://nodejs.org/en/learn/asynchronous-work/dont-block-the-event-loop)
    - 적은 수의 스레드로 많은 클리어언트의 요청을 처리할 수 있음
        - 싱글 스레드 이벤트 루프로 수만 건의 동시 연결 처리
- nginx : 주로 논블로킹 방식으로 동작하지만, 일부 작업에서 블로킹이 발생하는 경우 스레드 풀을 사용함으로써 이러한 블로킹 작업을 별도의 스레드에서 처리함. 이로 인해 메인 워커 프로세스의 블로킹을 방지하여 전체 성능과 효율을 유지함
(https://nginx.org/en/docs/dev/development_guide.html)
    - Apache보다 높은 동시성과 처리량 제공
- Spring WebFlux : 전통적인 Spring MVC 대비 적은 스레드로 높은 동시성 처리(https://docs.spring.io/spring-framework/reference/web/webflux/new-framework.html)
