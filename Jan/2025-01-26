# 클라이언트와 서버

- 클라이언트 : 서버에 서비스 요청하는 프로그램 or 서비스

- 서버 : 서비스 제공하는 컴퓨터 시스템. 클라이언트 요청에 응답

클라이언트는 웹이나 앱을 통해 서버에 접속하고 요청을 보냄. 서버는 서버 소프트웨어를 통해 클라이언트의 요청을 받고 이를 처리한 후 결과를 반환함



# 프론트엔드, 백엔드

- 프론트엔드 : 웹이나 앱의 사용자에게 직접 보여지거나 상호작용하는 부분

- 백엔드 : 사용자에게 보이지 않는 서버 개발. 데이터 처리

프론트는 소프트웨어를 시각적으로 사용할 수 있게. 백은 클라이언트의 요청에 대한 결과를 관리하고 전달



# HTTP

- Hypertext Transfer Protocol

- Hypertext : 하이퍼링크를 통해 다른 문서로 접근할 수 있는 텍스트

- HTML : Hypertext를 포함하는 파일

- HTTP : HTML 파일, 이미지, 비디오 데이터 등을 전송할 수 있게 해주는 규약

클라이언트와 웹서버가 통신할 때 표준화된 방법이 필요함. 안 그러면 통신할 때 마다 새로운 규칙을 설정해야함.

사용자가 클라이언트에 URL을 입력하고 요청을 보내면, 웹서버는 이 요청을 받아 해당하는 데이터를 응답



# Node.js

- 어디에서나 자바스크립트를 사용할 수 있도록 하는 런타임 환경

- 노드 : 데이터 통신망에서 데이터 전송하는 통로에 접속되는 하나 이상의 기능 단위

자바스크립트로 다양한 환경에서 프로그램 개발을 하기 위해서 사용. 자바스크립트로 서버 구현이 가능해짐



# Express.js

노드.js 위에서 동작하는 프레임워크. 훨씬 편하게 웹 서버 구축할 수 있음



# package.json

- 패키지 : 개별 소프트웨어 모듈 또는 라이브러리

- json : 자바 스크립트 문법으로 데이터를 표현하기 위한 문자 기반의 포맷

- 자바 스크립트 프로젝트의 설정과 의존성을 명세하는 파일

- 의존성 : 프로젝트가 관련된 다른 프로그램이나 라이브러리들에 대한 정보

프로젝트와 관련된 프로그램과 라이브러리를 편리하게 설치할 수 있게 해줌



# PM2

- Process Management 2

- 노드.js 기반 서버의 프로세스 관리 도구

- 애플리케이션을 효율적이고 쉽게 관리할 수 있음. 모니터링, 로그 제공

npm install pm2g 로 설치

pm2 start 파일.js 로 애플리케이션 시작

노드 js는 기본적으로 싱글 스레드 지원하지만 PM2를 통해 클러스트 모드를 활성화하여 서버 스레드 여러개를 활성화 할 수 있음.



# 코드 컨벤션

- 코드 규약

- 코드 가독성을 높이고 협업을 원활하게 하려고 팀 내에서 정함

- 관련 도구 : 에슬린트, 프리티어



# HTTP message

- 클라이언트와 서버 간의 파일 주고 받는 통신의 기본 단위

- 네 부분으로 구성

- 헤더

- start line : 요청이나 응답 상태 나타냄

- HTTP header : 메세지의 바디를 요약하는 헤더 집합

- empty line : 헤더와 본문을 구분하는 역할

- 바디 : 실제로 요청하는 내용

클라이언트와 서버 간 데이터를 교환하는 방법을 간단, 확장성 있게 표준화



# HTTP Request method

- 헤더의 start line에는 method와 path, protocol이 기록됨.

- path의 요청하는 데이터 위치, protocol 규칙 버전

- HTTP method는 웹 서버에게 어떤 작업을 수행하길 원하는 알리는 방법을 정의하는 규칙

- GET : 서버에게 데이터 요청

- POST : 서버에게 데이터 전송

- DELETE : 서버로부터 리소스 삭제

- PUT : 데이터 전체 수정

- PATCH : 데이터 일부분 수정

웹개발에서는 규칙을 따르지 않아도 동작하긴함.



# HTTP status code

- 웹 통신 규약에서 요청의 처리 상태 나타내는 코드

- 빠르게 클라이언트에게 응답 상태 알려줌

- 200번대 : 성공적인 응답. 정상적으로 요청 처리

- 300번대 : 리디렉션(웹 브라우저가 특정한 [URL](https://seo.tbwakorea.com/blog/seo-url/)을 서버에 요청했을 때, 사전에 지정된 URL로 재요청할 것을 지시받는 것)해야 함

- 400번대 : 클라이언트의 요청에 문제있음

- 500번대 : 서버 측에 문제가 있어 요청 처리 x

- 200 OK : 요청이 성공적으로 처리

- 201 Created : 새로운 리소스가 성공적으로 생성

- 204 no content : 요청은 성공, 별도로 반환할 내용이 없는 경우

- 301 Moved Permanently : 페이지 영구 이사 알림

- 302 Found : 페이지 일시적 이사 알림. 나중에는 다시 돌아올 것임

- 400 Bad Request : 잘못된 문법으로 서버가 요청 이해 불가

- 401 Unauthorized : 인증되지 않은 접근

- 403 Forbidden : 인가되지 않은 접근

- 404 Not Found : 요청받은 리소스 없음

- 500 Internal Server Error : 서버가 처리 방법을 알 수 없음. 서버 내부에 예기치 못한 상황 발생

- 503 Service Unavailable : 서버가 요청 처리 준비 x. 일시적 사용 불가능



# HTTP - URL

- 리소스의 위치와 종류를 나타내는 주소

- 웹 상의 리소스를 식별하고 접근하기 위해서 사용.

- 구조 :

- 스키마 : 브라우저가 리소스를 요청할 때 사용하는 프로토콜

- 도메인 : 웹 서버를 나타냄

- 포트 : 웹 서버의 특정 리소스에 접근하기 위한 포트번호. HTTP 표준 포트가 사용되는 경우 생략

- 리소스 path : 웹 서버 내에 저장된 특정 리소스를 지정하는 경로

- 매개변수 : 웹 서버에 보내는 매개변수로 ? 뒤에 위치함.



# Query string과 Path Variable

- Query string

- 클라이언트가 서버에 추가 정보를 전달하기 위해 사용하는 문자열

- 클라이언트로부터 서버에게 검색, 필터링, 정렬, 인피니티 스크롤 등의 기능을 구현하기 위해 추가적인 정보를 제공하기 위해 사용

- ?key=value&key1=value 이런식으로 사용

- Path Variable

- URL의 경로 부분에 포함되어 특정 자원을 식별하는 변수

- ex) /posts/{id}



# JSON

- 자바스크립트에서의 객체 표기법

- 데이터를 주고받는 표준 구조

- key : value 형식



# SQL

- structuerd query language

- 데이터베이스 시스템에서 자료를 처리하는 용도로 사용되는 구조적 데이터 질의 언어

- 데이터 정의어 : 데이터베이스 구조를 만들거나 변경

- 데이터 조작어 : 저장된 데이터를 조회, 삭제, 추가 등

- 데이터 제어어 : 데이터의 보안, 무결성, 데이터 회복, 병행 수행 제어 등을 정의하는 데 사용

- 디비에 있는 데이터를 조회, 추가, 삭제 수정을 위해 사용



# 디자인 패턴

- 코드에서 반복되는 문제를 해결하기 위해 미리 만들어진 구조적 해결책

- 유사한 상황에서 구조적 문제 해결, 코드 재사용성 높임.

- 아키텍쳐 패턴 - ex) route-controller

- 전체적인 소프트웨어 설계에서 발생하는 문제를 해결하기 위한 방법 제공

- 코드를 적절하게 분배하고, 가독성을 늘려 유지 보수성을 향상시키고 효율적으로 관리

- 컨트롤러는 비즈니스 로직을 직접 포함하기 보다는 서비스 계층에 위임

- 서비스 계층은 컨트롤러의 호출을 받아 데이터 처리. 비즈니스 로직을 캡슐화하여 유지보수성과 확장성 향상

- HTTP 요청 처리 과정 :

- 요청이 루트를 통해 들어오고 루트는 적절한 컨트롤러로 이를 전달.

- 컨트롤러는 모델을 통해 필요한 데이터를 db에서 가져와 컨트롤러로 넘김



# 데이터베이스

- 자료를 정보로 활용할 수 있도록 구조화한 것

- DBMS - 데이터베이스 관리 프로그램

- RDB - relational database

- 관계형 데이터베이스

- 자료를 테이블 형태로 관계를 맺어 놓은 데이터 모음

- 데이터 관리가 용이

- 데이터베이스를 사용하는 방법은 SQL을 사용한 것



# 정규화

- RDB 설계에서 중복을 최소화하도록 구조화하는 프로세스

- 제 1 정규형 : 릴레이션의 모든 속성이 더는 분해되지 않는 원자 값을 가짐

- 제 2 정규형 : 기본키가 아닌 모든 속성이 키본키에 완전 함수 종속됨

- 제 3 정규형 : 기본키가 아닌 모든 속성이 기본키에 이행적 함수 종속 되지 않음

- 보이스/코드 정규형 : 함수 종속 관계에서 모든 결정자가 후보키가 되어야 함
