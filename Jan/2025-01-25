# git 개념
- Git - 분산 버전 관리 시스템 =  코드를 번호를 붙여서 (흩어져서)관리하는 프로그램이다~
	- 깃은 코드 버전관리 하려고 사용하는 것
	- 깃헙은 다른 개발자들과 공유까지 하려고 사용하는 것

- 중앙 집중식 버전 관리 시스템 - 중앙에서 버전 관리를 한다. 중앙 = 서버
	- ex) 구글 docs
	- 장점 : 
		- 다른 사람과 동시에 같은 자료 가능
		- 로컬 저장 공간 아낌
		- 작업 순서 알 수 있음. 롤백하기 쉬움
		- 유실이 덜 생김
	- 단점 : 
		- 인터넷 연결이 없으면 못함
		- 서버 날라가면 없어짐
		- 동시에 같은 내용 작업 어려움
- 분산 버전 관리 시스템 - 버전 관리 정보를 로컬에도 복제하여 관리한다.
	- 장점 : 
		- 작업 순서 알 수 있음. 롤백 쉬움
		- 인터넷 없어도 가능
		- 서버 날라가도 복구할 수 있음
		- 동시에 같은 내용 작업 가능
	- 단점 : 
		- 관리가 어려움

# git 명령어 기본
- 깃에는 History, Stage, Working Directory(Tracked Files, Untracked Files)의 가상 공간 존재

- git init - .git 폴더 생성 = working directiory
- git add - Untracked Files 에서 stage로 올림
	- stage에 올린 파일을 수정하면 Tracked Files의 Unstaged Files로 이동
- git commit - stage에서 history로 이동. 변경 내용 확정
- git push - 서버에 올림
- git remote - 로컬 저장소에 연결된 원격 저장소 관리
- git status - 작업 중인 저장소 상태 확인
- git push - 로컬 저장소에서 변경된 내용을 원격 저장소에 업로드할 때 사용
- git clone - 원격 저장소에 있는 레포 처음 복제할 때 사용
- git pull - 원격 저장소에 있는 레포 최신 내용 로컬로 가져올 때 사용
	- git fetch + git merge
	- pull하고 push 하는 거 권장
- git log - commit 기록 확인
- git diff - 파일 변경 사항
	- git status와 차이 : git status는 어떤 파일이 변경됐는지, diff는 파일의 어떤 내용이 수정됐는지
- git difftool - 파일 변경 사항을 GUI 도구로 확인 
- git show - 하나의 commit 정보 확인
- git blame - 수정 내역 확인. 파일에 각 라인이 어떤 커밋에서 수정되었는지
- git stash - 임시저장. 최근 커밋과의 차이점 전부 보관. 
- git branch - 브랜치를 생성, 이동, 삭제할 때 사용
	- 브랜치 - 독립적인 작업 흐름. 다른 버전 관리하기 위해 사용. commit의 복사본

# git 명령어 응용

## merge
- 3-way merge 
	- 병합할 두 브랜치와 공통의 조상(base) 커밋을 이용하여 병합. git merge 대상 브랜치 명령어로 현재 작업 중인 브랜치에 대상 브랜치 병합
- fast-foward
	- 메인 브랜치에서 새로운 브랜치를 만들었을 때, 메인 브랜치에 새로운 커밋이 추가되지 않았으면 새로운 브랜치를 메인 브랜치로 바꾸는
- squash and merge
	- 새로운 브랜치의 커밋 기록을 없애고 메인 브랜치에 하나로 넣는다.
	  ![[Pasted image 20250125165728.png|150]]
- rebase
	- 새로운 브랜치 커밋들을 메인 브랜치 커밋 뒤에 이어 붙이는 것. confilct 생길 수도 있다는 단점이 있음. rebase는 새로 생성한 브랜치에서 명령함

## 응용 명령
- git restore - 작업 디렉토리의 파일 상태를 복구할 때 사용. commit 안한 변경사항을 마지막 commit으 돌아감
- git revert - 되돌아가는데 되돌아간다는 commit을 남김
## 알아두면 좋은 정보
- .gitignore 파일
	- git으로 관리하지 않은 파일이나 디렉토리 지정하는 파일
	  
- Git 브랜치 관리 전략(git-flow)
	- Main : 배포 브랜치
	- Develop : 테스트 브랜치
		- 최종적인 테스트가 이루어진 브랜치
	- Feature : 개발 브랜치
		1. `feature/**jira-001**` : 기획과 디자인에 따라 개발자에게 발행된 티켓으로 브랜치명
		2. `feature/**login-with-session**` : 어떤 작업인지 바로 알 수 있도록, 기능 내용에 대한 요약 브랜치명
		3. `void/**login-with-session**` : 브랜치명에 개발자 명을 붙여넣기도함
